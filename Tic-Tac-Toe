import math


def print_board(board):
    for row in board:
        print("|".join(row))
        print("-" * 5)


def check_winner(board):
    
    for row in board:
        if row[0] == row[1] == row[2] and row[0] != " ":
            return row[0]

    
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != " ":
            return board[0][col]

      
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != " ":
        return board[0][0]

    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != " ":
        return board[0][2]

    return None


def is_board_full(board):
    for row in board:
        if " " in row:
            return False
    return True


def get_available_moves(board):
    moves = []
    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                moves.append((i, j))
    return moves


def minimax(board, is_maximizing):
    winner = check_winner(board)
    if winner == "X":  
        return 1
    elif winner == "O":  
        return -1
    elif is_board_full(board):  # Draw
        return 0

    if is_maximizing:
        best_score = -math.inf
        for move in get_available_moves(board):
            board[move[0]][move[1]] = "X"
            score = minimax(board, False)
            board[move[0]][move[1]] = " "
            best_score = max(best_score, score)
        return best_score
    else:
        best_score = math.inf
        for move in get_available_moves(board):
            board[move[0]][move[1]] = "O"
            score = minimax(board, True)
            board[move[0]][move[1]] = " "
            best_score = min(best_score, score)
        return best_score


def ai_move(board):
    best_score = -math.inf
    best_move = None
    for move in get_available_moves(board):
        board[move[0]][move[1]] = "X"
        score = minimax(board, False)
        board[move[0]][move[1]] = " "
        if score > best_score:
            best_score = score
            best_move = move
    board[best_move[0]][best_move[1]] = "X"


def human_move(board):
    while True:
        row = int(input("Enter the row (0, 1, or 2): "))
        col = int(input("Enter the column (0, 1, or 2): "))
        if 0 <= row <= 2 and 0 <= col <= 2 and board[row][col] == " ":
            board[row][col] = "O"
            break
        else:
            print("Invalid move. Try again.")


def play_game():
    board = [[" " for _ in range(3)] for _ in range(3)]
    print("You are O, AI is X")
    print_board(board)

    while True:
        
        human_move(board)
        print_board(board)
        if check_winner(board):
            print(f"{check_winner(board)} wins!")
            break
        if is_board_full(board):
            print("It's a draw!")
            break

       
        ai_move(board)
        print("AI made its move:")
        print_board(board)
        if check_winner(board):
            print(f"{check_winner(board)} wins!")
            break
        if is_board_full(board):
            print("It's a draw!")
            break

if __name__ == "__main__":
    play_game()
