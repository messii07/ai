from collections import deque

class State:
    def __init__(self, stacks):
        self.stacks = stacks

    def __str__(self):
        return str(self.stacks)

    def is_goal(self, goal):
        return self.stacks == goal.stacks

    def get_possible_moves(self):
        moves = []
        for i, stack in enumerate(self.stacks):
            if stack:
                top_block = stack[-1]
                for j, other_stack in enumerate(self.stacks):
                    if i != j:
                        new_stacks = [s[:] for s in self.stacks]
                        new_stacks[i] = new_stacks[i][:-1]
                        new_stacks[j].append(top_block)
                        moves.append((State(new_stacks), f'Move {top_block} from stack {i} to stack {j}'))
        return moves

def bfs(initial_state, goal_state):
    queue = deque([(initial_state, [])])
    visited = set()

    while queue:
        current_state, path = queue.popleft()
        
        if current_state.is_goal(goal_state):
            return path

        visited.add(tuple(map(tuple, current_state.stacks)))

        for next_state, move in current_state.get_possible_moves():
            if tuple(map(tuple, next_state.stacks)) not in visited:
                visited.add(tuple(map(tuple, next_state.stacks)))
                queue.append((next_state, path + [move]))

    return None

if __name__ == "__main__":
    initial_stacks = [[1, 2], [3], []]
    goal_stacks = [[], [3], [1, 2]]

    initial_state = State(initial_stacks)
    goal_state = State(goal_stacks)

    solution = bfs(initial_state, goal_state)

    if solution:
        print("Solution found:")
        for move in solution:
            print(move)
    else:
        print("No solution found.")
